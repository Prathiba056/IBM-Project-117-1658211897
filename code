{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "ZDDiI2a3PVue"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\") "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv(\"/content/loan-train.csv\")\n",
        "test_data=pd.read_csv(\"/content/loan-test.csv\")\n",
        "print(\"Train Data\\n\")\n",
        "print(train_data.head())\n",
        "print(\"\\nTest Data\\n\")\n",
        "print(test_data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G9UmMPbtSAR6",
        "outputId": "f444582e-e82a-48fb-cc4a-d35cc3eac34b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Data\n",
            "\n",
            "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
            "0  LP001002   Male      No          0      Graduate            No   \n",
            "1  LP001003   Male     Yes          1      Graduate            No   \n",
            "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
            "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
            "4  LP001008   Male      No          0      Graduate            No   \n",
            "\n",
            "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
            "0             5849                0.0         NaN             360.0   \n",
            "1             4583             1508.0       128.0             360.0   \n",
            "2             3000                0.0        66.0             360.0   \n",
            "3             2583             2358.0       120.0             360.0   \n",
            "4             6000                0.0       141.0             360.0   \n",
            "\n",
            "   Credit_History Property_Area Loan_Status  \n",
            "0             1.0         Urban           Y  \n",
            "1             1.0         Rural           N  \n",
            "2             1.0         Urban           Y  \n",
            "3             1.0         Urban           Y  \n",
            "4             1.0         Urban           Y  \n",
            "\n",
            "Test Data\n",
            "\n",
            "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
            "0  LP001015   Male     Yes          0      Graduate            No   \n",
            "1  LP001022   Male     Yes          1      Graduate            No   \n",
            "2  LP001031   Male     Yes          2      Graduate            No   \n",
            "3  LP001035   Male     Yes          2      Graduate            No   \n",
            "4  LP001051   Male      No          0  Not Graduate            No   \n",
            "\n",
            "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
            "0             5720                  0       110.0             360.0   \n",
            "1             3076               1500       126.0             360.0   \n",
            "2             5000               1800       208.0             360.0   \n",
            "3             2340               2546       100.0             360.0   \n",
            "4             3276                  0        78.0             360.0   \n",
            "\n",
            "   Credit_History Property_Area  \n",
            "0             1.0         Urban  \n",
            "1             1.0         Urban  \n",
            "2             1.0         Urban  \n",
            "3             NaN         Urban  \n",
            "4             1.0         Urban  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Fielda in Train Data:\\n\")\n",
        "print(train_data.dtypes)\n",
        "print(\"\\n\",train_data.shape)\n",
        "print(\"\\nFields in Test Data:\\n\")\n",
        "print(test_data.dtypes)\n",
        "print(\"\\n\",test_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bfK1RQR3UDCb",
        "outputId": "982482ba-7d70-4889-d40c-ec94f93ccef6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fielda in Train Data:\n",
            "\n",
            "Loan_ID               object\n",
            "Gender                object\n",
            "Married               object\n",
            "Dependents            object\n",
            "Education             object\n",
            "Self_Employed         object\n",
            "ApplicantIncome        int64\n",
            "CoapplicantIncome    float64\n",
            "LoanAmount           float64\n",
            "Loan_Amount_Term     float64\n",
            "Credit_History       float64\n",
            "Property_Area         object\n",
            "Loan_Status           object\n",
            "dtype: object\n",
            "\n",
            " (614, 13)\n",
            "\n",
            "Fields in Test Data:\n",
            "\n",
            "Loan_ID               object\n",
            "Gender                object\n",
            "Married               object\n",
            "Dependents            object\n",
            "Education             object\n",
            "Self_Employed         object\n",
            "ApplicantIncome        int64\n",
            "CoapplicantIncome      int64\n",
            "LoanAmount           float64\n",
            "Loan_Amount_Term     float64\n",
            "Credit_History       float64\n",
            "Property_Area         object\n",
            "dtype: object\n",
            "\n",
            " (367, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy=train_data.copy()"
      ],
      "metadata": {
        "id": "k0Mv5NAtdh05"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MQaMXDKxdkFZ",
        "outputId": "c0089456-9576-4f24-ac1b-5865f9982839"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID               0\n",
              "Gender               13\n",
              "Married               3\n",
              "Dependents           15\n",
              "Education             0\n",
              "Self_Employed        32\n",
              "ApplicantIncome       0\n",
              "CoapplicantIncome     0\n",
              "LoanAmount           22\n",
              "Loan_Amount_Term     14\n",
              "Credit_History       50\n",
              "Property_Area         0\n",
              "Loan_Status           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy[\"Gender\"].fillna(train_copy[\"Gender\"].mode()[0],inplace=True)\n",
        "train_copy[\"Married\"].fillna(train_copy[\"Married\"].mode()[0],inplace=True)\n",
        "train_copy[\"Dependents\"].fillna(train_copy[\"Dependents\"].mode()[0],inplace=True)\n",
        "train_copy[\"Self_Employed\"].fillna(train_copy[\"Self_Employed\"].mode()[0],inplace=True)\n",
        "train_copy[\"Credit_History\"].fillna(train_copy[\"Credit_History\"].mode()[0],inplace=True)\n",
        "train_copy[\"Loan_Amount_Term\"].fillna(train_copy[\"Loan_Amount_Term\"].mode()[0],inplace=True)\n",
        "train_copy[\"LoanAmount\"].fillna(train_copy[\"LoanAmount\"].median(), inplace=True)\n"
      ],
      "metadata": {
        "id": "99JeJjZLd4kM"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l6j2dY2UMpi2",
        "outputId": "944a73db-a5f5-4cfe-b03d-82372b5b6061"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID              0\n",
              "Gender               0\n",
              "Married              0\n",
              "Dependents           0\n",
              "Education            0\n",
              "Self_Employed        0\n",
              "ApplicantIncome      0\n",
              "CoapplicantIncome    0\n",
              "LoanAmount           0\n",
              "Loan_Amount_Term     0\n",
              "Credit_History       0\n",
              "Property_Area        0\n",
              "Loan_Status          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in train_copy.columns:\n",
        "  print(\"\\n\",i)\n",
        "  if i==\"Loan_ID\":\n",
        "    continue\n",
        "  if(i==\"Credit_History\"):\n",
        "    train_copy[i].value_counts().plot.bar()\n",
        "    plt.show()\n",
        "    continue\n",
        "  if train_copy[i].dtype==\"object\":\n",
        "    train_copy[i].value_counts().plot.bar()\n",
        "    plt.show()\n",
        "  else:\n",
        "    sns.distplot(train_copy[i])\n",
        "    plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "pKzIpXYvVQCU",
        "outputId": "392ca4f3-30fc-47ee-e9c7-ae1d3962542f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Loan_ID\n",
            "\n",
            " Gender\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Married\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Dependents\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Education\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Self_Employed\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " ApplicantIncome\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " CoapplicantIncome\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " LoanAmount\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Loan_Amount_Term\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Credit_History\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Property_Area\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Loan_Status\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy2=train_copy.copy()\n",
        "train_copy2[\"LoanAmount\"]=np.log(train_copy[\"LoanAmount\"])\n",
        "train_copy2[\"Loan_Amount_Term\"]=np.log(train_copy[\"Loan_Amount_Term\"])\n",
        "\n"
      ],
      "metadata": {
        "id": "2qVlPeFpPc02"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in train_copy2.columns:\n",
        "  \n",
        "  if train_copy2[i].dtype!=\"object\":\n",
        "    print(\"\\n\",i)\n",
        "    sns.distplot(train_copy2[i])\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ZUCMPMwyQQNT",
        "outputId": "efddcb9c-97e4-4c41-8d10-418462fed721"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " ApplicantIncome\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " CoapplicantIncome\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " LoanAmount\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Loan_Amount_Term\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Credit_History\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy[\"Dependents\"].replace('3+',3,inplace=True)\n",
        "train_copy[\"Loan_Status\"].replace('Y',1,inplace=True)\n",
        "train_copy[\"Loan_Status\"].replace('N',0,inplace=True)\n"
      ],
      "metadata": {
        "id": "nC-Eqgv-bQkE"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matrix=train_copy.corr()\n",
        "sns.heatmap(matrix,vmax=1,square=True,cmap=\"BuPu\",annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "V1qhIKSccNTr",
        "outputId": "80758828-b480-4a00-988a-d40e34e7f3a6"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2d62294790>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in train_copy.columns:\n",
        "  if i==\"Loan_Status\" or i==\"Loan_ID\":\n",
        "    continue\n",
        "  if i==\"Credit_History\":\n",
        "    ob=pd.crosstab(train_copy[i],train_copy[\"Loan_Status\"])\n",
        "    ob.div(ob.sum(1).astype(float), axis=0).plot(kind=\"bar\",stacked=True,figsize=(5,5))\n",
        "    plt.show\n",
        "  if train_copy[i].dtype==\"object\":\n",
        "    ob=pd.crosstab(train_copy[i],train_copy[\"Loan_Status\"])\n",
        "    ob.div(ob.sum(1).astype(float), axis=0).plot(kind=\"bar\",stacked=True,figsize=(5,5))\n",
        "    plt.show\n",
        "\n"
      ],
      "metadata": {
        "id": "QUOvUeROwSXi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "af4b0ba9-fd3c-4811-d4f5-1e0e4b328193"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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dH7SQj22fPlypk6dyoQJE/jyl7/MG2+8AcBNN93EpEmTOOGEEzjvvPPYsmULALNmzeKKK67gM5/5DKNGjeLee+/d7WO//vrrHHnkkQwYUPlRbW1tZejQocydO5c//vGPnHjiiVxwwQUAnHvuuZxyyikcf/zxLFy4EOBD273yyiuMGzdu1+N/73vf45prrgFgwYIFjB07lgkTJjBjxoy6/z2p8Qyeeuyiiy5i/vz5rFixgvHjx/Otb30LgK985SssW7aM3/72t4wZM4abb7551+95/fXX+fWvf80DDzzA3Lkf+vDOLueffz73338/J554IldddRXPPvssAPPmzeOAAw5g+fLlLFq0CIBbbrmFp59+mra2NhYsWMCmTZu63G535s2bx7PPPsuKFSu48cYbe/rXoiZk8NQjmzdv5s033+S0004D4OKLL2bp0qUAPPfcc3zuc59j/PjxLFq0iFWrVu36feeeey4DBgxg7Nix/P73v9/t47e2trJ69Wq+853vMGDAAM4880weffTRLrddsGABJ5xwAlOnTmXdunW89NJLH+nPMmHCBC644ALuuOMOBg6s5RRV9TX+v6peM2vWLO677z5OOOEEbr31Vh577LFd9w0ePHjX7czc4+MMHjyYadOmMW3aNI444gjuu+8+zjzzzA9s89hjj/Hzn/+cxx9/nAMPPJDTTz+9y0+IDBw4kPfee/+TEh23efDBB1m6dCn3338/119/PStXrjR8/Yx7eOqRQw45hKFDh/KrX/0KgNtvv33X3t5bb73FkUceyfbt27t9Obk7zzzzDK+99hpQOWK7YsUKjj66cm2KQYMGsX37dqCypzl06FAOPPBAXnzxRZ544oldj9FxuyOOOIINGzawadMmtm3bxgMPPLDrsdetW8cZZ5zB/Pnz2bx5M2+//fZezazm5T9f+ki2bNlCa2vrruUrr7yS2267ja997Wts2bKFUaNG8cMf/hCA6667jilTptDS0sKUKVN46623PvLzbdiwgcsuu4xt2yrnsk+ePJk5c+YAMHv2bCZMmMDJJ5/MLbfcwo033siYMWM47rjjmDp16q7H6LjdokWLuPrqq5k8eTLDhw/n05/+NAA7duzgwgsvZPPmzWQmV1xxxa6jweo/oruXE71l4sSJ2dbW1pDn7mzk3AcbPUJT+tnFoxgzZkyjx2gqj/zjM1y2+PVG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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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2HmnhXptw4YNzJw5kylTpnDppZfyyiuvAPDtb3+badOmMXXqVD796U+zd+9eABYuXMiSJUv48Ic/zLhx43jwwQcPe+ydO3cycuRIBg3q+FFtbm5mxIgRLF26lN///vdccMEFXH755QBccsklfPCDH+T8889nxYoVAO/a7+WXX2bSpEmHjv/1r3+dG264AYDly5czceJEpkyZwvz582v+76T6M3jqtSuvvJJbbrmFjRs3MnnyZL785S8D8KlPfYp169bxi1/8ggkTJnD77bcf+jM7d+7kpz/9KY8++ihLl77r5p1DLrvsMh555BEuuOACrrvuOtavXw/AsmXLOOmkk9iwYQP33nsvAHfccQfPPPMMra2tLF++nPb29m73O5xly5axfv16Nm7cyG233dbbfxY1IIOnXtmzZw+//e1v+djHPgbAVVddxdq1awF47rnn+MhHPsLkyZO599572bx586E/d8kllzBo0CAmTpzIr3/968Mev7m5mS1btvDVr36VQYMGMWvWLJ544olu912+fDlTp05l5syZbNu2jRdeeOGY/i5Tpkzh8ssv57vf/S6DB1fzElX1N/6vqj6zcOFCHn74YaZOncpdd93FmjVrDm0bOnTooe8z84jHGTp0KHPmzGHOnDmcddZZPPzww8yaNesd+6xZs4Yf/ehHPPnkk5x88slcdNFF3d4hMnjwYA4efPtOic77PPbYY6xdu5ZHHnmEm2++mU2bNhm+AcYzPPXK8OHDGTFiBD/5yU8AuOeeew6d7b366quMHDmS/fv3H/Xp5OE8++yz7NixA+i4Yrtx40bOOafjvSmGDBnC/v37gY4zzREjRnDyySfzq1/9iqeeeurQMTrvd9ZZZ7Fr1y7a29vZt28fjz766KFjb9u2jY9//OPccsst7Nmzh9dee61HM6tx+Z8vHZO9e/fS3Nx8aPnaa6/l7rvv5gtf+AJ79+5l3Lhx3HnnnQDcdNNNzJgxg6amJmbMmMGrr756zI+3a9currnmGvbt63gt+/Tp01m8eDEAixYtYsqUKVx44YXccccd3HbbbUyYMIHzzjuPmTNnHjpG5/3uvfderr/+eqZPn86oUaN4//vfD8CBAwe44oor2LNnD5nJkiVLDl0N1sARR3s60VdaWlqytbW1Lo/d1Zilj9V7hIb0D1eNY8KECfUeo6E8/rNnuWblznqP0XBe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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "range=[0,30000,60000,90000]\n",
        "label=[\"low\",\"medium\",\"high\"]\n",
        "income=pd.cut(train_copy[\"ApplicantIncome\"],range,labels=label)\n",
        "income_bin=pd.crosstab(income,train_copy[\"Loan_Status\"])\n",
        "income_bin.div(income_bin.sum(1).astype(float),axis=0).plot(kind=\"bar\",stacked=True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "zovyBr1kJk0Y",
        "outputId": "b77fe11d-ae7c-4f7b-bc51-5ac9b5587791"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "range=[0,15000,25000,45000]\n",
        "label=[\"low\",\"medium\",\"high\",]\n",
        "income=pd.cut(train_copy[\"CoapplicantIncome\"],range,labels=label)\n",
        "income_bin=pd.crosstab(income,train_copy[\"Loan_Status\"])\n",
        "income_bin.div(income_bin.sum(1).astype(float),axis=0).plot(kind=\"bar\",stacked=True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "PGWZci_RW-fU",
        "outputId": "2eb06be4-7a9f-4ff1-bce7-ed610e430c38"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "range=[0,250,500,750]\n",
        "label=[\"low\",\"medium\",\"high\",]\n",
        "income=pd.cut(train_copy[\"LoanAmount\"],range,labels=label)\n",
        "income_bin=pd.crosstab(income,train_copy[\"Loan_Status\"])\n",
        "income_bin.div(income_bin.sum(1).astype(float),axis=0).plot(kind=\"bar\",stacked=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "EwBJnkmiYnN5",
        "outputId": "4e941fcb-5a6d-424a-afd5-4aeb2325cbc7"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_copy=test_data.copy()"
      ],
      "metadata": {
        "id": "wCXiwbYeZq2f"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_copy.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l1e1fAvhaEU4",
        "outputId": "1178b9bd-ed8d-4bb6-c128-cb548cf1bb60"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID               0\n",
              "Gender               11\n",
              "Married               0\n",
              "Dependents           10\n",
              "Education             0\n",
              "Self_Employed        23\n",
              "ApplicantIncome       0\n",
              "CoapplicantIncome     0\n",
              "LoanAmount            5\n",
              "Loan_Amount_Term      6\n",
              "Credit_History       29\n",
              "Property_Area         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_copy[\"Gender\"].fillna(test_copy[\"Gender\"].mode()[0],inplace=True)\n",
        "test_copy[\"Married\"].fillna(test_copy[\"Married\"].mode()[0],inplace=True)\n",
        "test_copy[\"Dependents\"].fillna(test_copy[\"Dependents\"].mode()[0],inplace=True)\n",
        "test_copy[\"Self_Employed\"].fillna(test_copy[\"Self_Employed\"].mode()[0],inplace=True)\n",
        "test_copy[\"Credit_History\"].fillna(test_copy[\"Credit_History\"].mode()[0],inplace=True)\n",
        "test_copy[\"Loan_Amount_Term\"].fillna(test_copy[\"Loan_Amount_Term\"].mode()[0],inplace=True)\n",
        "test_copy[\"LoanAmount\"].fillna(test_copy[\"LoanAmount\"].median(), inplace=True)"
      ],
      "metadata": {
        "id": "zGfOLYYfaO0y"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_copy.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L8nVpso4alf1",
        "outputId": "0cdb3307-1cab-4350-e0fd-285efaf49050"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID              0\n",
              "Gender               0\n",
              "Married              0\n",
              "Dependents           0\n",
              "Education            0\n",
              "Self_Employed        0\n",
              "ApplicantIncome      0\n",
              "CoapplicantIncome    0\n",
              "LoanAmount           0\n",
              "Loan_Amount_Term     0\n",
              "Credit_History       0\n",
              "Property_Area        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_copy[\"Dependents\"].replace('3+',3,inplace=True)"
      ],
      "metadata": {
        "id": "hmyEgmAsbAzt"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_copy=test_copy.drop(\"Loan_ID\",axis=1)\n",
        "train_copy=train_copy.drop(\"Loan_ID\",axis=1)\n"
      ],
      "metadata": {
        "id": "bnyjWFD5Z339"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = train_copy.drop(\"Loan_Status\",axis=1)\n",
        "y = train_copy[\"Loan_Status\"]\n"
      ],
      "metadata": {
        "id": "IG8j3dsEj3hZ"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=pd.get_dummies(x)\n",
        "train_copy1=pd.get_dummies(train_copy)\n",
        "test_copy1=pd.get_dummies(test_copy)\n",
        "x.head()"
      ],
      "metadata": {
        "id": "96c7n6EnfCFb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "outputId": "caa8defe-0349-40db-8aca-b07d11421d17"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "0             5849                0.0       128.0             360.0   \n",
              "1             4583             1508.0       128.0             360.0   \n",
              "2             3000                0.0        66.0             360.0   \n",
              "3             2583             2358.0       120.0             360.0   \n",
              "4             6000                0.0       141.0             360.0   \n",
              "\n",
              "   Credit_History  Gender_Female  Gender_Male  Married_No  Married_Yes  \\\n",
              "0             1.0              0            1           1            0   \n",
              "1             1.0              0            1           0            1   \n",
              "2             1.0              0            1           0            1   \n",
              "3             1.0              0            1           0            1   \n",
              "4             1.0              0            1           1            0   \n",
              "\n",
              "   Dependents_3  Dependents_0  Dependents_1  Dependents_2  Education_Graduate  \\\n",
              "0             0             1             0             0                   1   \n",
              "1             0             0             1             0                   1   \n",
              "2             0             1             0             0                   1   \n",
              "3             0             1             0             0                   0   \n",
              "4             0             1             0             0                   1   \n",
              "\n",
              "   Education_Not Graduate  Self_Employed_No  Self_Employed_Yes  \\\n",
              "0                       0                 1                  0   \n",
              "1                       0                 1                  0   \n",
              "2                       0                 0                  1   \n",
              "3                       1                 1                  0   \n",
              "4                       0                 1                  0   \n",
              "\n",
              "   Property_Area_Rural  Property_Area_Semiurban  Property_Area_Urban  \n",
              "0                    0                        0                    1  \n",
              "1                    1                        0                    0  \n",
              "2                    0                        0                    1  \n",
              "3                    0                        0                    1  \n",
              "4                    0                        0                    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c650005-f098-4ade-b7f4-f0276f966fa2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Gender_Female</th>\n",
              "      <th>Gender_Male</th>\n",
              "      <th>Married_No</th>\n",
              "      <th>Married_Yes</th>\n",
              "      <th>Dependents_3</th>\n",
              "      <th>Dependents_0</th>\n",
              "      <th>Dependents_1</th>\n",
              "      <th>Dependents_2</th>\n",
              "      <th>Education_Graduate</th>\n",
              "      <th>Education_Not Graduate</th>\n",
              "      <th>Self_Employed_No</th>\n",
              "      <th>Self_Employed_Yes</th>\n",
              "      <th>Property_Area_Rural</th>\n",
              "      <th>Property_Area_Semiurban</th>\n",
              "      <th>Property_Area_Urban</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c650005-f098-4ade-b7f4-f0276f966fa2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3c650005-f098-4ade-b7f4-f0276f966fa2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3c650005-f098-4ade-b7f4-f0276f966fa2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2)\n"
      ],
      "metadata": {
        "id": "LoqjhvJvjb8s"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score\n",
        "LRM=LogisticRegression()\n",
        "LRM.fit(xtrain,ytrain)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T8Et3WYcly5O",
        "outputId": "8e04d06b-8925-4c61-eb8a-44e628f10a42"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=LRM.predict(xtest)\n",
        "accuracy_score(ytest,pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QHtM_ugSnxNf",
        "outputId": "9efe4b6c-603b-4df9-8ff8-140cd20bdd2f"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8292682926829268"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_pred=LRM.predict(test_copy1)\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=test_pred\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]]\n"
      ],
      "metadata": {
        "id": "p75n3_wJodD2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "afb4140e-e54a-438e-9151-d77a811ffb99"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Loan_ID Loan_Status\n",
              "0    LP001015           Y\n",
              "1    LP001022           Y\n",
              "2    LP001031           Y\n",
              "3    LP001035           Y\n",
              "4    LP001051           Y\n",
              "..        ...         ...\n",
              "362  LP002971           Y\n",
              "363  LP002975           Y\n",
              "364  LP002980           Y\n",
              "365  LP002986           Y\n",
              "366  LP002989           Y\n",
              "\n",
              "[367 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecf946b5-6108-4565-a719-db22c5e9962d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>LP002971</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>LP002975</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>LP002980</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>LP002986</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>366</th>\n",
              "      <td>LP002989</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>367 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecf946b5-6108-4565-a719-db22c5e9962d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ecf946b5-6108-4565-a719-db22c5e9962d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ecf946b5-6108-4565-a719-db22c5e9962d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_copy1[\"TOtal_Income\"]=train_copy1[\"ApplicantIncome\"]+train_copy1[\"CoapplicantIncome\"]\n",
        "test_copy1[\"TOtal_Income\"]=test_copy1[\"ApplicantIncome\"]+test_copy1[\"CoapplicantIncome\"]\n",
        "train_copy1[\"EMI\"]=train_copy1[\"LoanAmount\"]/train_copy1[\"Loan_Amount_Term\"]\n",
        "test_copy1[\"EMI\"]=test_copy1[\"LoanAmount\"]/test_copy1[\"Loan_Amount_Term\"]\n"
      ],
      "metadata": {
        "id": "lNyqus1MgCu4"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=train_copy1.drop(\"Loan_Status\",axis=1)\n",
        "y=train_copy1[\"Loan_Status\"]\n",
        "x.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "dXsz36qmkxF-",
        "outputId": "a182397d-4e42-448f-8dbe-7298c43825f6"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "0             5849                0.0       128.0             360.0   \n",
              "1             4583             1508.0       128.0             360.0   \n",
              "2             3000                0.0        66.0             360.0   \n",
              "3             2583             2358.0       120.0             360.0   \n",
              "4             6000                0.0       141.0             360.0   \n",
              "\n",
              "   Credit_History  Gender_Female  Gender_Male  Married_No  Married_Yes  \\\n",
              "0             1.0              0            1           1            0   \n",
              "1             1.0              0            1           0            1   \n",
              "2             1.0              0            1           0            1   \n",
              "3             1.0              0            1           0            1   \n",
              "4             1.0              0            1           1            0   \n",
              "\n",
              "   Dependents_3  ...  Dependents_2  Education_Graduate  \\\n",
              "0             0  ...             0                   1   \n",
              "1             0  ...             0                   1   \n",
              "2             0  ...             0                   1   \n",
              "3             0  ...             0                   0   \n",
              "4             0  ...             0                   1   \n",
              "\n",
              "   Education_Not Graduate  Self_Employed_No  Self_Employed_Yes  \\\n",
              "0                       0                 1                  0   \n",
              "1                       0                 1                  0   \n",
              "2                       0                 0                  1   \n",
              "3                       1                 1                  0   \n",
              "4                       0                 1                  0   \n",
              "\n",
              "   Property_Area_Rural  Property_Area_Semiurban  Property_Area_Urban  \\\n",
              "0                    0                        0                    1   \n",
              "1                    1                        0                    0   \n",
              "2                    0                        0                    1   \n",
              "3                    0                        0                    1   \n",
              "4                    0                        0                    1   \n",
              "\n",
              "   TOtal_Income       EMI  \n",
              "0        5849.0  0.355556  \n",
              "1        6091.0  0.355556  \n",
              "2        3000.0  0.183333  \n",
              "3        4941.0  0.333333  \n",
              "4        6000.0  0.391667  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad8a4936-bcc9-4365-9ba7-fb836d41739d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Gender_Female</th>\n",
              "      <th>Gender_Male</th>\n",
              "      <th>Married_No</th>\n",
              "      <th>Married_Yes</th>\n",
              "      <th>Dependents_3</th>\n",
              "      <th>...</th>\n",
              "      <th>Dependents_2</th>\n",
              "      <th>Education_Graduate</th>\n",
              "      <th>Education_Not Graduate</th>\n",
              "      <th>Self_Employed_No</th>\n",
              "      <th>Self_Employed_Yes</th>\n",
              "      <th>Property_Area_Rural</th>\n",
              "      <th>Property_Area_Semiurban</th>\n",
              "      <th>Property_Area_Urban</th>\n",
              "      <th>TOtal_Income</th>\n",
              "      <th>EMI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5849.0</td>\n",
              "      <td>0.355556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6091.0</td>\n",
              "      <td>0.355556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3000.0</td>\n",
              "      <td>0.183333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4941.0</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6000.0</td>\n",
              "      <td>0.391667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad8a4936-bcc9-4365-9ba7-fb836d41739d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ad8a4936-bcc9-4365-9ba7-fb836d41739d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ad8a4936-bcc9-4365-9ba7-fb836d41739d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import StratifiedKFold"
      ],
      "metadata": {
        "id": "r1BMZN2lmx8A"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "i=1\n",
        "mean = 0\n",
        "kf = StratifiedKFold(n_splits=7,random_state=1,shuffle=True)\n",
        "for train_index,test_index in kf.split(x,y):\n",
        "    print ('\\n{} of kfold {} '.format(i,kf.n_splits))\n",
        "    xtr,xvl = x.loc[train_index],x.loc[test_index]\n",
        "    ytr,yvl = y[train_index],y[test_index]\n",
        "    LRM = LogisticRegression(random_state=1)\n",
        "    LRM.fit(xtr,ytr)\n",
        "    pred_test=LRM.predict(xvl)\n",
        "    score=accuracy_score(yvl,pred_test)\n",
        "    mean=mean+ score\n",
        "    \n",
        "    print ('accuracy score is ',score)\n",
        "    i=i+1\n",
        "    if i>kf.n_splits:\n",
        "      pred_test=LRM.predict(test_copy1)\n",
        "print ('\\nMean Validation Accuracy',mean/(i-1),'\\n')\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=pred_test\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]].head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "jpozgj-1mzdN",
        "outputId": "d63049a3-e056-4f43-e093-16f0298e542d"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "2 of kfold 7 \n",
            "accuracy score is  0.8068181818181818\n",
            "\n",
            "3 of kfold 7 \n",
            "accuracy score is  0.8181818181818182\n",
            "\n",
            "4 of kfold 7 \n",
            "accuracy score is  0.8068181818181818\n",
            "\n",
            "5 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "6 of kfold 7 \n",
            "accuracy score is  0.8390804597701149\n",
            "\n",
            "7 of kfold 7 \n",
            "accuracy score is  0.7816091954022989\n",
            "\n",
            "Mean Validation Accuracy 0.8062024182713838 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Loan_Status\n",
              "0  LP001015           Y\n",
              "1  LP001022           Y\n",
              "2  LP001031           Y\n",
              "3  LP001035           Y\n",
              "4  LP001051           Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c162c0c4-c4b0-41cd-927c-66a69239138e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c162c0c4-c4b0-41cd-927c-66a69239138e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c162c0c4-c4b0-41cd-927c-66a69239138e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c162c0c4-c4b0-41cd-927c-66a69239138e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import tree\n",
        "i=1\n",
        "mean=0\n",
        "kf=StratifiedKFold(n_splits=7,random_state=1,shuffle=True)\n",
        "for train_index,test_index in kf.split(x,y):\n",
        "  print('\\n{} of kfold {} '.format(i,kf.n_splits))\n",
        "  xtr,xvl=x.loc[train_index],x.loc[test_index]\n",
        "  ytr,yvl=y.loc[train_index],y.loc[test_index]\n",
        "  DT=tree.DecisionTreeClassifier(random_state=1)\n",
        "  DT.fit(xtr,ytr)\n",
        "  pred_test=DT.predict(xvl)\n",
        "  score=accuracy_score(yvl,pred_test)\n",
        "  mean=mean+score\n",
        "  print('accuracy score is ',score)\n",
        "  i=i+1\n",
        "  if i>kf.n_splits:\n",
        "    pred_test=LRM.predict(test_copy1)\n",
        "print('\\nMean Validation Accuracy ',mean/(i-1),'\\n')\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=pred_test\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]].head()\n"
      ],
      "metadata": {
        "id": "f_8yhfIethNx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "outputId": "7302a307-611d-4d70-cd8d-8906cc7d34e9"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 of kfold 7 \n",
            "accuracy score is  0.7159090909090909\n",
            "\n",
            "2 of kfold 7 \n",
            "accuracy score is  0.7386363636363636\n",
            "\n",
            "3 of kfold 7 \n",
            "accuracy score is  0.7386363636363636\n",
            "\n",
            "4 of kfold 7 \n",
            "accuracy score is  0.6931818181818182\n",
            "\n",
            "5 of kfold 7 \n",
            "accuracy score is  0.6818181818181818\n",
            "\n",
            "6 of kfold 7 \n",
            "accuracy score is  0.735632183908046\n",
            "\n",
            "7 of kfold 7 \n",
            "accuracy score is  0.6896551724137931\n",
            "\n",
            "Mean Validation Accuracy  0.7133527392148081 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Loan_Status\n",
              "0  LP001015           Y\n",
              "1  LP001022           Y\n",
              "2  LP001031           Y\n",
              "3  LP001035           Y\n",
              "4  LP001051           Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-79c69078-2db8-4d00-b459-2833e70e4d44\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79c69078-2db8-4d00-b459-2833e70e4d44')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-79c69078-2db8-4d00-b459-2833e70e4d44 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-79c69078-2db8-4d00-b459-2833e70e4d44');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "i=1\n",
        "mean=0\n",
        "kf=StratifiedKFold(n_splits=7,random_state=1,shuffle=True)\n",
        "for train_index,test_index in kf.split(x,y):\n",
        "  print('\\n{} of kfold {} '.format(i,kf.n_splits))\n",
        "  xtr,xvl=x.loc[train_index],x.loc[test_index]\n",
        "  ytr,yvl=y.loc[train_index],y.loc[test_index]\n",
        "  RF=RandomForestClassifier(random_state=1,max_depth=7)\n",
        "  RF.fit(xtr,ytr)\n",
        "  pred_test=RF.predict(xvl)\n",
        "  score=accuracy_score(yvl,pred_test)\n",
        "  mean=mean+score\n",
        "  print('accuracy score is ',score)\n",
        "  i=i+1\n",
        "  if i>kf.n_splits:\n",
        "    pred_test=LRM.predict(test_copy1)\n",
        "print('\\nMean Validation Accuracy ',mean/(i-1),'\\n')\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=pred_test\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "yd_MFgClaHDb",
        "outputId": "604f27a0-f522-4f7f-b440-9e108d23f6cd"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 of kfold 7 \n",
            "accuracy score is  0.7840909090909091\n",
            "\n",
            "2 of kfold 7 \n",
            "accuracy score is  0.8522727272727273\n",
            "\n",
            "3 of kfold 7 \n",
            "accuracy score is  0.8295454545454546\n",
            "\n",
            "4 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "5 of kfold 7 \n",
            "accuracy score is  0.7613636363636364\n",
            "\n",
            "6 of kfold 7 \n",
            "accuracy score is  0.8275862068965517\n",
            "\n",
            "7 of kfold 7 \n",
            "accuracy score is  0.7816091954022989\n",
            "\n",
            "Mean Validation Accuracy  0.8045603821465891 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Loan_Status\n",
              "0  LP001015           Y\n",
              "1  LP001022           Y\n",
              "2  LP001031           Y\n",
              "3  LP001035           Y\n",
              "4  LP001051           Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-404b5f64-67fe-454a-ad38-932875090f6e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-404b5f64-67fe-454a-ad38-932875090f6e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-404b5f64-67fe-454a-ad38-932875090f6e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-404b5f64-67fe-454a-ad38-932875090f6e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV,train_test_split\n",
        "l=[1,2,3,4,5,6,7,8,9]\n",
        "l1=[10,20,30,40,50,60,70,80,90]\n",
        "paramgrid = {'max_depth': l, 'n_estimators': l1}\n",
        "grid_search=GridSearchCV(RandomForestClassifier(random_state=1),paramgrid)\n",
        "xt,xv,yt,yv=train_test_split(x,y,test_size=0.2,random_state=1)\n",
        "grid_search.fit(xt,yt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mhM9MkBQiuNa",
        "outputId": "fec40e48-6417-451a-eb4c-b23f78944762"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(estimator=RandomForestClassifier(random_state=1),\n",
              "             param_grid={'max_depth': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
              "                         'n_estimators': [10, 20, 30, 40, 50, 60, 70, 80, 90]})"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "euDd2CJLjoxW",
        "outputId": "63e811c0-69e5-4840-8b89-3d6a5d14c827"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(max_depth=4, n_estimators=70, random_state=1)"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "i=1\n",
        "mean=0\n",
        "kf=StratifiedKFold(n_splits=7,random_state=1,shuffle=True)\n",
        "for train_index,test_index in kf.split(x,y):\n",
        "  print('\\n{} of kfold {} '.format(i,kf.n_splits))\n",
        "  xtr,xvl=x.loc[train_index],x.loc[test_index]\n",
        "  ytr,yvl=y.loc[train_index],y.loc[test_index]\n",
        "  RF=RandomForestClassifier(random_state=1,max_depth=4,n_estimators=70)\n",
        "  RF.fit(xtr,ytr)\n",
        "  pred_test=RF.predict(xvl)\n",
        "  score=accuracy_score(yvl,pred_test)\n",
        "  mean=mean+score\n",
        "  print('accuracy score is ',score)\n",
        "  i=i+1\n",
        "  if i>kf.n_splits:\n",
        "    pred_test=LRM.predict(test_copy1)\n",
        "print('\\nMean Validation Accuracy ',mean/(i-1),'\\n')\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=pred_test\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "yi3X2uWuko_O",
        "outputId": "41a4f2a4-9929-4264-881e-40b9b0283859"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "2 of kfold 7 \n",
            "accuracy score is  0.8522727272727273\n",
            "\n",
            "3 of kfold 7 \n",
            "accuracy score is  0.8295454545454546\n",
            "\n",
            "4 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "5 of kfold 7 \n",
            "accuracy score is  0.7840909090909091\n",
            "\n",
            "6 of kfold 7 \n",
            "accuracy score is  0.8390804597701149\n",
            "\n",
            "7 of kfold 7 \n",
            "accuracy score is  0.7816091954022989\n",
            "\n",
            "Mean Validation Accuracy  0.8110725481415136 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Loan_Status\n",
              "0  LP001015           Y\n",
              "1  LP001022           Y\n",
              "2  LP001031           Y\n",
              "3  LP001035           Y\n",
              "4  LP001051           Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4d2ea338-38d9-4b0b-932b-2ca87b7e65da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d2ea338-38d9-4b0b-932b-2ca87b7e65da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4d2ea338-38d9-4b0b-932b-2ca87b7e65da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4d2ea338-38d9-4b0b-932b-2ca87b7e65da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "i=1\n",
        "mean=0\n",
        "kf=StratifiedKFold(n_splits=7,random_state=1,shuffle=True)\n",
        "for train_index,test_index in kf.split(x,y):\n",
        "  print('\\n{} of kfold {} '.format(i,kf.n_splits))\n",
        "  xtr,xvl=x.loc[train_index],x.loc[test_index]\n",
        "  ytr,yvl=y.loc[train_index],y.loc[test_index]\n",
        "  XGB=XGBClassifier(random_state=1,max_depth=4,n_estimators=70)\n",
        "  XGB.fit(xtr,ytr)\n",
        "  pred_test=XGB.predict(xvl)\n",
        "  score=accuracy_score(yvl,pred_test)\n",
        "  mean=mean+score\n",
        "  print('accuracy score is ',score)\n",
        "  i=i+1\n",
        "  if i>kf.n_splits:\n",
        "    pred_test=LRM.predict(test_copy1)\n",
        "print('\\nMean Validation Accuracy ',mean/(i-1),'\\n')\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=pred_test\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "9_jkgsijk8wC",
        "outputId": "487a059c-5260-46a1-f1ff-f317bfbeec49"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "2 of kfold 7 \n",
            "accuracy score is  0.8295454545454546\n",
            "\n",
            "3 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "4 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "5 of kfold 7 \n",
            "accuracy score is  0.75\n",
            "\n",
            "6 of kfold 7 \n",
            "accuracy score is  0.8390804597701149\n",
            "\n",
            "7 of kfold 7 \n",
            "accuracy score is  0.7701149425287356\n",
            "\n",
            "Mean Validation Accuracy  0.7964434990297059 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Loan_Status\n",
              "0  LP001015           Y\n",
              "1  LP001022           Y\n",
              "2  LP001031           Y\n",
              "3  LP001035           Y\n",
              "4  LP001051           Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3468c10a-7fb0-46c4-89cc-f08576c922e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3468c10a-7fb0-46c4-89cc-f08576c922e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3468c10a-7fb0-46c4-89cc-f08576c922e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3468c10a-7fb0-46c4-89cc-f08576c922e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l=[1,2,3,4,5,6,7,8,9]\n",
        "l1=[10,20,30,40,50,60,70,80,90]\n",
        "paramgrid = {'max_depth': l, 'n_estimators': l1}\n",
        "grid_search=GridSearchCV(XGBClassifier(random_state=1),paramgrid)\n",
        "xt,xv,yt,yv=train_test_split(x,y,test_size=0.2,random_state=1)\n",
        "grid_search.fit(xt,yt)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XPGIyEUKmDwO",
        "outputId": "2367a044-0314-4c3f-ce9c-7d517da69a21"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(estimator=XGBClassifier(random_state=1),\n",
              "             param_grid={'max_depth': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
              "                         'n_estimators': [10, 20, 30, 40, 50, 60, 70, 80, 90]})"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HXyDDgxGmZkP",
        "outputId": "406f85b4-00a6-4015-8c68-33035c691628"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(n_estimators=20, random_state=1)"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "i=1\n",
        "mean=0\n",
        "kf=StratifiedKFold(n_splits=7,random_state=1,shuffle=True)\n",
        "for train_index,test_index in kf.split(x,y):\n",
        "  print('\\n{} of kfold {} '.format(i,kf.n_splits))\n",
        "  xtr,xvl=x.loc[train_index],x.loc[test_index]\n",
        "  ytr,yvl=y.loc[train_index],y.loc[test_index]\n",
        "  XGB=XGBClassifier(random_state=1,n_estimators=20)\n",
        "  XGB.fit(xtr,ytr)\n",
        "  pred_test=XGB.predict(xvl)\n",
        "  score=accuracy_score(yvl,pred_test)\n",
        "  mean=mean+score\n",
        "  print('accuracy score is ',score)\n",
        "  i=i+1\n",
        "  if i>kf.n_splits:\n",
        "    pred_test=LRM.predict(test_copy1)\n",
        "print('\\nMean Validation Accuracy ',mean/(i-1),'\\n')\n",
        "result=test_copy.copy()\n",
        "result[\"Loan_Status\"]=pred_test\n",
        "result[\"Loan_ID\"]=test_data[\"Loan_ID\"]\n",
        "result[\"Loan_Status\"].replace(1,'Y',inplace=True)\n",
        "result[\"Loan_Status\"].replace(0,'N',inplace=True)\n",
        "result[[\"Loan_ID\",\"Loan_Status\"]].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "2Mi9_r30mky8",
        "outputId": "32649a95-84f1-4f4e-8060-06499bd70e3d"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1 of kfold 7 \n",
            "accuracy score is  0.7954545454545454\n",
            "\n",
            "2 of kfold 7 \n",
            "accuracy score is  0.8409090909090909\n",
            "\n",
            "3 of kfold 7 \n",
            "accuracy score is  0.8181818181818182\n",
            "\n",
            "4 of kfold 7 \n",
            "accuracy score is  0.8068181818181818\n",
            "\n",
            "5 of kfold 7 \n",
            "accuracy score is  0.7840909090909091\n",
            "\n",
            "6 of kfold 7 \n",
            "accuracy score is  0.8275862068965517\n",
            "\n",
            "7 of kfold 7 \n",
            "accuracy score is  0.7816091954022989\n",
            "\n",
            "Mean Validation Accuracy  0.8078071353933423 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Loan_Status\n",
              "0  LP001015           Y\n",
              "1  LP001022           Y\n",
              "2  LP001031           Y\n",
              "3  LP001035           Y\n",
              "4  LP001051           Y"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0aff76a-4eec-40cf-9dd6-25e8ebf3661d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001015</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001022</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001031</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001035</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001051</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0aff76a-4eec-40cf-9dd6-25e8ebf3661d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0aff76a-4eec-40cf-9dd6-25e8ebf3661d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0aff76a-4eec-40cf-9dd6-25e8ebf3661d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    }
  ]
}
